plugins {
    // Apply the plugin. You can find the latest version at https://projects.neoforged.net/neoforged/ModDevGradle
    id 'net.neoforged.moddev' version '2.0.42-beta'
}

apply plugin: "maven-publish"

version = "${rootProject.mod_version}+${rootProject.minecraft_base_version}"
group = rootProject.maven_group

def ENV = System.getenv()

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url "https://maven.nucleoid.xyz/" }
    maven { url 'https://maven.wispforest.io/releases' }
    maven { url "https://maven.su5ed.dev/releases" }
    mavenLocal()
}

dependencies {
    implementation(rootProject)

    implementation("io.wispforest:endec:0.1.8")
    implementation("io.wispforest.endec:netty:0.1.4")
    implementation("io.wispforest.endec:gson:0.1.5")
    implementation("io.wispforest.endec:jankson:0.1.5")

    implementation("blue.endless:jankson:${project.jankson_version}")

    implementation("org.sinytra:forgified-fabric-loader:${project.loader_version}:full")


    //implementation rootProject.sourceSets.main
}

neoForge {
    // We currently only support NeoForge versions later than 21.0.x
    // See https://projects.neoforged.net/neoforged/neoforge for the latest updates
    version = rootProject.neoforge_version

    // Validate AT files and raise errors when they have invalid targets
    // This option is false by default, but turning it on is recommended
    validateAccessTransformers = true

    accessTransformers {
        from(rootProject.file("src/main/resources/META-INF/owo.accesstransformer.cfg"))
        publish(rootProject.file("src/main/resources/META-INF/owo.accesstransformer.cfg"))
    }

    interfaceInjectionData {
        from(rootProject.file("src/main/resources/interfaces.json"))
        publish(rootProject.file("src/main/resources/interfaces.json"))
    }

    mods {
        testproject {
            sourceSet sourceSets.main
        }
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifactId = project.archivesBaseName
        }
    }

    repositories {
        maven {
            url ENV.MAVEN_URL
            credentials {
                username ENV.MAVEN_USER
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}
